setwd(dirname(getActiveDocumentContext()$path)) #set wd current directory
rstudioapi::getActiveDocumentContext()$path %>% dirname() -> script_dir %>% setwd()
rstudioapi::getActiveDocumentContext()$path %>% dirname()  %>% setwd()
#write msigdb genes from homer
human.msigdb.genes = fread(input = "./human.msigdb.genes",header = F,select = c(3))
library(data.table)
#write msigdb genes from homer
human.msigdb.genes = fread(input = "./human.msigdb.genes",header = F,select = c(3))
#write msigdb genes from homer
human.msigdb.genes = fread(input = "./human.msigdb.genes",header = F,select = c(3))
human.msigdb.genes.index = c()
human2gene = fread(input = "./human2gene.tsv",header = F,select = c(2,7),col.names = c("gene_index","gene_symbol"))
View(human2gene)
View(human.msigdb.genes)
#write msigdb genes from homer
human.msigdb.genes = fread(input = "./human.msigdb.genes",header = F,select = c(3))
human.msigdb.genes.index = c()
for (row_num in 1:nrow(human.msigdb.genes)) {
row = human.msigdb.genes[row_num,] %>% t() %>% as.vector()
splitted = strsplit(x = row,split = ",") %>% unlist()
human.msigdb.genes.index = c(human.msigdb.genes.index,splitted)
}
View(human2gene)
View(human.msigdb.genes)
#write hallmark db from homer
human.msigdb.genes = fread(input = "./human.msigdb.genes",header = F)
View(human.msigdb.genes)
#write hallmark db from homer
human.msigdb.genes = fread(input = "./human.msigdb.genes",header = F,select = c(2,3),col.names = c("pathway_name","gene_symbol"))
#write hallmark db from homer
human.msigdb.PATHWAYS = fread(input = "./human.msigdb.genes",header = F,select = c(2,3),col.names = c("pathway_name","gene_symbol"))
#write hallmark db from homer
human.msigdb.pathways = fread(input = "./human.msigdb.genes",header = F,select = c(2,3),col.names = c("pathway_name","gene_symbol"))
View(human.msigdb.pathways)
msigdb_genes = msigdbr(species = "Homo sapiens")
library(msigdbr)
msigdb_genes = msigdbr(species = "Homo sapiens") %>%
dplyr::distinct(gs_name, gene_symbol) %>% as.data.frame()
?distinct
hallmark_db = msigdbr(species = "Homo sapiens",category = "H") %>%as.data.frame()
View(hallmark_db)
msigdbr_t2g = hallmark_gene_set %>% dplyr::distinct(gs_name, gene_symbol) %>% as.data.frame()
hallmark_gene_set = msigdbr(species = "Homo sapiens", category = "H")
msigdbr_t2g = hallmark_gene_set %>% dplyr::distinct(gs_name, gene_symbol) %>% as.data.frame()
View(msigdbr_t2g)
View(human.msigdb.genes)
human.msigdb.pathways %<>% starts_with("HALLMARK")
human.msigdb.pathways %<>% starts_with(match = "HALLMARK")
human.msigdb.pathways %<>% startsWith(match = "HALLMARK")
human.msigdb.pathways %<>% startsWith( "HALLMARK")
View(human.msigdb.pathways)
human.msigdb.pathways %<>% filter($pathway_name %>% starts_with("HALLMARK"))
human.msigdb.pathways %<>% filter(pathway_name %>% starts_with("HALLMARK"))
a =  human.msigdb.pathways %>% filter(pathway_name %>% starts_with("HALLMARK"))
a =  human.msigdb.pathways %>% filter(starts_with("HALLMARK",vars = pathway_name))
a =  human.msigdb.pathways %>% filter(str_detect(pathway_name,"HALLMARK"))
View(a)
human.msigdb.pathways =  human.msigdb.pathways %>% filter(str_detect(pathway_name,"HALLMARK"))
View(human.msigdb.pathways)
human.msigdb.pathways =  human.msigdb.pathways %>% filter(str_detect($pathway_name,"HALLMARK"))
human.msigdb.pathways =  human.msigdb.pathways %>% filter(str_detect(pathway_name,"HALLMARK"))
hallmark_pathways_vector = human.msigdb.pathways$pathway_name %>% unique()
name = hallmark_pathways_vector[1]
pathway = human.msigdb.pathways %>% filter(pathway_name == name)
View(pathway)
View(human.msigdb.genes)
pathway = human.msigdb.pathways %>% filter(pathway_name == name) %>% select(gene_symbol)
View(pathway)
View(human.msigdb.pathways)
pathway_genes = human.msigdb.pathways %>% filter(pathway_name == name) %>% select(gene_symbol) %>% t() %>% as.vector()
human2gene = fread(input = "./human2gene.tsv",header = F,select = c(2,7),col.names = c("gene_index","gene_symbol"))
human2gene_dic = human2gene$gene_symbol
names(human2gene_dic)  = human2gene$gene_index
splitted = strsplit(x = pathway_genes,split = ",") %>% unlist()
pathway_symbols = human2gene_dic[splitted]
homer_hallmark = data.frame()
pathway_df = data.frame(pathway_name = name, genes = pathway_symbols)
View(pathway_df)
rbind(homer_hallmark, pathway_df)
homer_hallmark = rbind(homer_hallmark, pathway_df)
View(homer_hallmark)
homer_hallmark = data.frame()
for (name in hallmark_pathways_vector) {
pathway_genes = human.msigdb.pathways %>% filter(pathway_name == name) %>% select(gene_symbol) %>% t() %>% as.vector()
splitted = strsplit(x = pathway_genes,split = ",") %>% unlist()
pathway_symbols = human2gene_dic[splitted]
pathway_df = data.frame(pathway_name = name, genes = pathway_symbols)
homer_hallmark = rbind(homer_hallmark, pathway_df)
}
View(homer_hallmark)
homer_hallmark = data.frame()
for (name in hallmark_pathways_vector) {
pathway_genes = human.msigdb.pathways %>% filter(pathway_name == name) %>% select(gene_symbol) %>% t() %>% as.vector()
splitted = strsplit(x = pathway_genes,split = ",") %>% unlist()
pathway_symbols = human2gene_dic[splitted]
pathway_df = data.frame(gs_names = name, gene_symbol = pathway_symbols)
homer_hallmark = rbind(homer_hallmark, pathway_df)
}
View(homer_hallmark)
fwrite(homer_hallmark,file = "homer_hallmark.txt")
fwrite(homer_hallmark,file = "homer_hallmark.csv")
hallmark_db <- scan("https://raw.githubusercontent.com/avishai987/DEG_functions/main/msigdb_homer_genes.txt", character(), quote = "",quiet = T)
hallmark_db <- scan("https://github.com/avishai987/DEG_functions/blob/main/homer_hallmark.csv", character(), quote = "",quiet = T)
hallmark_db <- fread("https://github.com/avishai987/DEG_functions/blob/main/homer_hallmark.csv",sep = ",")
View(hallmark_db)
hallmark_db <- fread("https://raw.githubusercontent.com/avishai987/DEG_functions/main/homer_hallmark.csv",sep = ",")
View(hallmark_db)
# enrichment analysis function. Argument: output from de_split, group name.
enrichment_analysis <- function(Differential_expression_genes = NULL, all_regulated = NULL,
group_name="",background, fdr_Cutoff = 0.01,ident1_name = "",
ident2_name = "",write_csv = F, ident_name = "", ident_num = 1,
return_df = F, pval_cutoff = F, add_bg_to_db = F , db = NULL,
add_msigdb_to_bg = F) {
library(msigdbr)
library(fdrtool)
library(enrichR)
library(clusterProfiler)
library(RCurl)
if ( is.null(all_regulated)){
if ( is.null(Differential_expression_genes)){
print("please provide Differential_expression_genes or all_regulated")
return (NULL)
}
all_regulated = de_split(Differential_expression_genes)
}
i = 1; #for choosing the right the names
all_graphs <- list() #create list to save graphs
all_results = list()#create list to enrichment results
all_output_df = list()#create list to enrichment results
for (regulated in all_regulated) { #do twice for downregulated and up
#take genes from differential expression
regulated <- tibble::rownames_to_column(regulated, "genes")
genes = regulated[,c("genes","avg_log2FC")] #get genes and FC
#calculate fdr
regulated$fdr<-p.adjust(p = as.vector(regulated$p_val) ,method = "fdr" )
if (pval_cutoff == T){
fdr_genes = regulated$genes[regulated$p_val<0.05] #take genes less than the cutoff
}
if (pval_cutoff == F){
fdr_genes = regulated$genes[regulated$fdr<fdr_Cutoff] #take genes less than the cutoff
}
#set hallmark pathways
if (is.null(db)){
hallmark_gene_set = msigdbr(species = "Homo sapiens", category = "H")
msigdbr_t2g = hallmark_gene_set %>% dplyr::distinct(gs_name, gene_symbol) %>% as.data.frame()
}else if(db == "homer_hallmark"){
msigdbr_t2g <- fread("https://raw.githubusercontent.com/avishai987/DEG_functions/main/homer_hallmark.csv",sep = ",")
} else{ msigdbr_t2g = db}
#Add all genes to msigdb (beacause the background is (TERM2GENE AND universe) (not like the documentation))
if (!is.null(background) & add_bg_to_db == T){
all_genes = data.frame(gs_name = "background",gene_symbol = background)
msigdbr_t2g = rbind(all_genes, msigdbr_t2g)
}
if ( add_msigdb_to_bg == T){
msigdb_genes <- scan("https://raw.githubusercontent.com/avishai987/DEG_functions/main/msigdb_homer_genes.txt", character(), quote = "",quiet = T)
all_genes = data.frame(gs_name = "msigdb",gene_symbol = msigdb_genes)
msigdbr_t2g = rbind(all_genes, msigdbr_t2g)
}
#perform enrichment analysis
enrichment_result = enricher(
gene = fdr_genes,
pvalueCutoff = 0.0001,
pAdjustMethod = "fdr",
universe = background,
minGSSize = 10,
maxGSSize = 500,
qvalueCutoff = 0.0001,
TERM2GENE = msigdbr_t2g,
TERM2NAME = NA
)
#take relevant result
if (!is.null(enrichment_result)) {
enrichment_result = enrichment_result@result #take results
enrichment_result = enrichment_result[ , -which(names(enrichment_result) %in% c("ID","Description","geneID"))] #remove unwanted cols
output_df  = enrichment_result
#Add pathways that not in the output_df
all_pathways = unique(msigdbr_t2g$gs_name)
computed_pathways = rownames(output_df)
not_computed = all_pathways [!all_pathways %in% computed_pathways]
zeros = replicate(0, n =length(not_computed))
ones = replicate(1, n =length(not_computed))
empty_pathways = data.frame(GeneRatio = zeros , BgRatio = zeros ,
pvalue =ones , p.adjust = ones, qvalue = zeros, Count = zeros, row.names = not_computed)
output_df = rbind(output_df, empty_pathways)
all_output_df[[i]] = output_df
names (all_output_df)[i] = names(all_regulated)[i]
enrichment_result = enrichment_result[startsWith(x = rownames(enrichment_result),prefix = "HALLMARK"),]
enrichment_result <- tibble::rownames_to_column(enrichment_result, "pathway_name") #make row names as column
enrichment_result = enrichment_result[order(enrichment_result$p.adjust),] #order by pvalue
enrichment_result = enrichment_result[1:10,] #take best 10 pathways
enrichment_result[, 5] <- -log10(enrichment_result['p.adjust']) #perform -log10 on p.adjust values
}
else{ #if no genes were significant, plot empty enrichment result
# pathway_names = c("HALLMARK_WNT_BETA_CATENIN_SIGNALING", "HALLMARK_MYC_TARGETS_V2",
#                   "HALLMARK_UV_RESPONSE_DN", "HALLMARK_IL2_STAT5_SIGNALING", "HALLMARK_E2F_TARGETS",
#                   "HALLMARK_ESTROGEN_RESPONSE_EARLY", "HALLMARK_G2M_CHECKPOINT",
#                   "HALLMARK_INFLAMMATORY_RESPONSE", "HALLMARK_MYC_TARGETS_V1",
#                   "HALLMARK_P53_PATHWAY", "HALLMARK_TNFA_SIGNALING_VIA_NFKB")
msigdbr_t2g = hallmark_gene_set %>% dplyr::distinct(gs_name, gene_symbol) %>% as.data.frame()
pathway_names =  unique(msigdbr_t2g$gs_name)
enrichment_result = data.frame(pathway_name = pathway_names[1:10], p.adjust = 0)
zeros = replicate(0, n = 50)
ones = replicate(1, n = 50)
output_df = data.frame(GeneRatio = zeros , BgRatio = zeros ,
pvalue =ones , p.adjust = ones, qvalue = zeros, Count = zeros, row.names = pathway_names)
all_output_df[[i]] = output_df
names (all_output_df)[i] = names(all_regulated)[i]
}
if (write_csv == T){
file_name = paste0(names(all_regulated)[i],"_",group_name,".csv")
write.csv(x=enrichment_result, file=file_name)
}
ident = ident2_name
#make graph title
if (names(all_regulated)[i]=="up_regulated"){
markers_title="negative markers"
bar_color = "indianred2"
}
else if(names(all_regulated)[i]=="down_regulated"){
markers_title="positive markers"
bar_color = "dodgerblue"
}
else {
print ("error")
return (0)
}
#create graph
p = ggplot(data = enrichment_result, aes_string(x = reorder(enrichment_result$pathway_name,
enrichment_result$p.adjust), y = "p.adjust")) +
geom_bar(stat = "identity", fill = bar_color) +
geom_hline(yintercept = 1.3, colour="black", linetype = "longdash",size = 1) +
coord_flip() + xlab("Pathway") +
scale_fill_manual( drop = FALSE) +
ylab("-log10(p.adjust)") +
geom_text(aes_string(label = "pathway_name", y = 0),
size = 4,
color = "black",
position = position_dodge(1),
hjust = 0)+
theme(axis.title.y= element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
ggtitle(paste(ident, markers_title))
all_graphs =  append(all_graphs, list(p))
all_results[[names(all_regulated)[i]]] = enrichment_result
i = i+1
}
p3<-all_graphs[[1]]+all_graphs[[2]]
print(p3)
if (return_df){
return (all_output_df)
}
else{
return(p3)
}
}
egfr816_V3 = readRDS("../Data/egfr.tpm_seurat_filtered3.RDS")
egfr816_V3 = readRDS("../Data/egfr.tpm_seurat_filtered3.RDS")
egfr816_V3 = subset(egfr816_V3, subset = cell.origin == "Tumor")
egfr816_V3 = SetIdent(object = egfr816_V3,value = 'time.point')
library(data.table)
library("ggplot2")
library("plyr")
library("Seurat")
library("SingleCellSignalR")
library("SingleCellSignalR")
library(dplyr)
library(pheatmap)
library(beepr)
library(enrichR)
library(msigdbr)
library(stringi)
library(devtools)
library(SourceFromGithub)
library(ggpubr)
egfr816_V3 = SetIdent(object = egfr816_V3,value = 'time.point')
de_genes = FindMarkers(egfr816_V3, ident.1 = "pre-treatment", ident.2 = "on-treatment",
logfc.threshold = 1.5 ,densify = T)
result = enrichment_analysis(de_genes, background = rownames(de_genes),fdr_Cutoff = 0.5,
ident1_name = "pre-treatment",ident2_name = "on-treatment",db = NULL ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
result = enrichment_analysis(de_genes, background = rownames(de_genes),fdr_Cutoff = 0.5,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
source_from_github(repositoy =
"DEG_functions", version = "0.1.1")
source_from_github(repositoy =
"DEG_functions", version = "0.1.1")
result = enrichment_analysis(de_genes, background = rownames(de_genes),fdr_Cutoff = 0.5,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
debug(enrichment_analysis)
result = enrichment_analysis(de_genes, background = rownames(de_genes),fdr_Cutoff = 0.5,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
debug(enrichment_analysis)
result = enrichment_analysis(de_genes, background = rownames(de_genes),fdr_Cutoff = 0.5,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
View(all_genes)
View(all_genes)
View(msigdbr_t2g)
result = enrichment_analysis(de_genes, background = rownames(de_genes),fdr_Cutoff = 0.5,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
homer_hallmark = data.frame()
for (name in hallmark_pathways_vector) {
pathway_genes = human.msigdb.pathways %>% filter(pathway_name == name) %>% select(gene_symbol) %>% t() %>% as.vector()
splitted = strsplit(x = pathway_genes,split = ",") %>% unlist()
pathway_symbols = human2gene_dic[splitted]
pathway_df = data.frame(gs_name = name, gene_symbol = pathway_symbols)
homer_hallmark = rbind(homer_hallmark, pathway_df)
}
fwrite(homer_hallmark,file = "homer_hallmark.csv")
source_from_github(repositoy =
"DEG_functions", version = "0.1.2")
result = enrichment_analysis(de_genes, background = rownames(de_genes),fdr_Cutoff = 0.5,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
View(result)
View(result[["up_regulated"]])
homer_result = fread(input = "../Data/msigdb.txt")
homer_result = fread(input = "../Data/msigdb.txt")
View(homer_result)
View(homer_result)
homer_result = fread(input = "../Data/msigdb.txt",fill = T)  %>% filter(str_detect(termID,"HALLMARK"))
homer_result = fread(input = "../Data/msigdb.txt",fill = T)  %>%as.data.frame() %>%  filter(str_detect(termID,"HALLMARK"))
homer_result = fread(input = "../Data/msigdb.txt",fill = T)  %>%as.data.frame() %>%  filter(str_detect(termID,"HALLMARK"))
homer_result = fread(input = "../Data/msigdb.txt",fill = T)  %>%as.data.frame()
View(homer_result)
homer_result = fread(input = "../Data/msigdb.txt",fill = F)  %>%as.data.frame()
View(homer_result)
homer_result = fread(input = "../Data/msigdb.txt",fill = T)  %>%as.data.frame()
getwd()
View(homer_result)
homer_result = fread(input = "../Data/msigdb.txt",fill = T,sep = " ")  %>%as.data.frame()
View(homer_result)
homer_result = fread(input = "../Data/msigdb.txt",fill = T,sep = "\t")  %>%as.data.frame()
View(homer_result)
homer_result = fread(input = "../Data/msigdb.txt",fill = T,sep = "\t")  %>%as.data.frame() %>% filter(str_detect(termID,"HALLMARK"))
View(homer_result)
homer_result = fread(input = "../Data/msigdb.txt",fill = T,sep = "\t")  %>%as.data.frame() %>% filter(str_detect(TermID,"HALLMARK"))
View(homer_result)
View(result)
View(result[["down_regulated"]])
View(result[["up_regulated"]])
View(msigdbr_t2g)
View(human2gene)
View(human.msigdb.genes)
View(human.msigdb.pathways)
hallmark_pathways_vector
name = "HALLMARK_HEME_METABOLISM"
pathway_genes = human.msigdb.pathways %>% filter(pathway_name == name) %>% select(gene_symbol) %>% t() %>% as.vector()
splitted = strsplit(x = pathway_genes,split = ",") %>% unlist()
name = "HALLMARK_HYPOXIA"
pathway_genes = human.msigdb.pathways %>% filter(pathway_name == name) %>% select(gene_symbol) %>% t() %>% as.vector()
splitted = strsplit(x = pathway_genes,split = ",") %>% unlist()
View(result)
View(result[["down_regulated"]])
View(homer_hallmark)
View(de_genes)
all_regulated = de_split(de_genes)
regulated = all_regulated[[1]]
#take genes from differential expression
regulated <- tibble::rownames_to_column(regulated, "genes")
genes = regulated[,c("genes","avg_log2FC")] #get genes and FC
#calculate fdr
regulated$fdr<-p.adjust(p = as.vector(regulated$p_val) ,method = "fdr" )
fdr_genes = regulated$genes[regulated$fdr<0.05] #take genes less than the cutoff
debug(enrichment_analysis)
result = enrichment_analysis(de_genes, background = rownames(de_genes),fdr_Cutoff = 0.5,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
source_from_github(repositoy =
"DEG_functions", version = "0.1.2")
source_from_github(repositoy =
"DEG_functions", version = "0.1.2")
result = enrichment_analysis(de_genes, background = rownames(de_genes),fdr_Cutoff = 0.05,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
View(result)
View(result[["up_regulated"]])
msigdb_genes <- scan("https://raw.githubusercontent.com/avishai987/DEG_functions/main/msigdb_homer_genes.txt", character(), quote = "",quiet = T)
inter = intersect(rownames(de_genes), msigdb_genes)
#write msigdb genes from homer
human.msigdb.genes = fread(input = "./human.msigdb.genes",header = F,select = c(3))
human.msigdb.genes.index = c()
for (row_num in 1:nrow(human.msigdb.genes)) {
row = human.msigdb.genes[row_num,] %>% t() %>% as.vector()
splitted = strsplit(x = row,split = ",") %>% unlist()
human.msigdb.genes.index = c(human.msigdb.genes.index,splitted)
}
View(human.msigdb.genes)
human.msigdb.genes.index = human.msigdb.genes.index %>% unique()
View(human.msigdb.genes)
View(homer_result)
a = homer_result %>% filter($`Target Genes in Term`>=1)
a = homer_result %>% filter(`Target Genes in Term`>=1) %>% pull(TermID)
b = result[["up_regulated"]] %>% filter(result[["up_regulated"]]$Count>=1)
View(b)
c = colnames(b)
c = rownames(b)
setdiff(b,a)
unique(b[! b %in% a])
unique(a[! a %in% b])
union(setdiff(a,b), setdiff(b,a))
! b %in% a
! (b %in% c)
! (a %in% c)
a[! (a %in% c)]
"ETS2" %in% msigdb_genes
"ETS2" %in% rownames(de_genes)
View(msigdbr_t2g)
all_regulated = de_split(de_genes)
regulated = all_regulated[[1]]
#take genes from differential expression
regulated <- tibble::rownames_to_column(regulated, "genes")
genes = regulated[,c("genes","avg_log2FC")] #get genes and FC
#calculate fdr
regulated$fdr<-p.adjust(p = as.vector(regulated$p_val) ,method = "fdr" )
fdr_genes = regulated$genes[regulated$fdr<0.05 & regulated$avg_log2FC>0] #take genes less than the cutoff
fdr_genes = regulated$genes[regulated$fdr<0.05] #take genes less than the cutoff
View(de_genes)
View(regulated)
View(human.msigdb.pathways)
View(human2gene)
View(msigdbr_t2g)
View(de_genes)
debug(enrichment_analysis)
result = enrichment_analysis(de_genes, background = rownames(de_genes),fdr_Cutoff = 0.05,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
View(regulated)
"ETS2" %in% fdr_genes
"ETS2" %in% fdr_genes
"ETS2" %in% background
View(msigdbr_t2g)
"ETS2" %in% msigdbr_t2g$gene_symbol
View(enrichment_result)
View(enrichment_result@result)
View(msigdbr_t2g)
enrichment_result = enricher(
gene = fdr_genes,
pvalueCutoff = 0,
pAdjustMethod = "fdr",
universe = background,
minGSSize = 10,
maxGSSize = 500,
qvalueCutoff = 0,
TERM2GENE = msigdbr_t2g,
TERM2NAME = NA
)
View(enrichment_result)
View(enrichment_result@result)
enrichment_result = enricher(
gene = fdr_genes,
pvalueCutoff = 1,
pAdjustMethod = "fdr",
universe = background,
minGSSize = 10,
maxGSSize = 500,
qvalueCutoff = 1,
TERM2GENE = msigdbr_t2g,
TERM2NAME = NA
)
View(enrichment_result)
View(enrichment_result@result)
View(msigdbr_t2g)
View(msigdbr_t2g)
View(human2gene)
human.msigdb.genes.index
human.msigdb.genes.index = human.msigdb.genes.index %>% unique()
human.msigdb.genes_symbols = human2gene_dic[human.msigdb.genes.index]
human.msigdb.genes_symbols = human.msigdb.genes_symbols %>% unname
?enricher
View(human2gene)
View(human.msigdb.PATHWAYS)
View(human2gene)
View(msigdbr_t2g)
View(msigdbr_t2g)
View(human2gene)
View(de_genes)
human2gene_dic_revered = setNames(names(human2gene_dic), human2gene_dic)
a =  human2gene_dic[rownames(de_genes)]
names(human2gene)
names(human2gene_dic) %>% head
names(human2gene_dic_revered) %>% head
(human2gene_dic_revered) %>% head
a =  human2gene_dic_revered[rownames(de_genes)]
a = a %>% unname()
a = a %>% unique()
a =  human2gene_dic_revered[rownames(de_genes)]
View(de_genes)
a = a %>% unname()
inter2 = intersect(a, human.msigdb.genes.index)
fwrite(inter2,file = "background.txt",sep = "\n")
fwrite(inter2 %>% as.list(),file = "background.txt",sep = "\n")
a = human.msigdb.genes_symbols!(human.msigdb.genes_symbols %in% inter2)
a = human.msigdb.genes_symbols [!(human.msigdb.genes_symbols %in% inter2)]
a = human.msigdb.genes_symbols [(human.msigdb.genes_symbols %in% inter2)]
a = human.msigdb.genes_symbols [(inter2  %in% human.msigdb.genes_symbols )]
a = human.msigdb.genes_symbols [!(human.msigdb.genes_symbols %in% inter2)]
human.msigdb.genes_symbols %in% inter2 %>% table
a = human.msigdb.genes_symbols [!(human.msigdb.genes_symbols %in% inter)]
fwrite(a %>% as.list(),file = "background.txt",sep = "\n")
View(msigdbr_t2g)
result = enrichment_analysis(de_genes, background = a ,fdr_Cutoff = 0.05,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
undebug(enrichment_analysis)
result = enrichment_analysis(de_genes, background = a ,fdr_Cutoff = 0.05,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
View(result)
View(result[["up_regulated"]])
View(result)
View(result[["up_regulated"]])
debug(enrichment_analysis)
result = enrichment_analysis(de_genes, background = a ,fdr_Cutoff = 0.05,
ident1_name = "pre-treatment",ident2_name = "on-treatment" ,return_df = T, add_bg_to_db = F, add_msigdb_to_bg = T,db = "homer_hallmark")
View(msigdbr_t2g)
View(msigdbr_t2g)
View(human.msigdb.genes)
a %in% human.msigdb.genes_symbols %>% table()
